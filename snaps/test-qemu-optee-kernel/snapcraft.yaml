name: test-qemu-optee-kernel
summary: Kernel for QEMU & OP-TEE integration testing
description: Kernel for QEMU & OP-TEE integration testing
version: v0.0.1
type: kernel
confinement: strict
grade: stable
build-base: core24

platforms:
  arm64:
    build-on: [amd64]
    build-for: [arm64]

package-repositories:
  - type: apt
    architectures: [arm64]
    formats: [deb, deb-src]
    components: [main, universe]
    suites: [noble, noble-updates, noble-backports]
    key-id: F6ECB3762474EDA9D21B7022871920D1991BC93C
    url: http://ports.ubuntu.com/ubuntu-ports

build-packages:
  - binutils-aarch64-linux-gnu
  - gcc-aarch64-linux-gnu
  - libc6-dev-arm64-cross
  - gcc-arm-linux-gnueabihf
  - pkgconf

parts:
  kernel:
    plugin: nil
    source: https://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/noble
    source-branch: master-next
    source-type: git
    source-depth: 1
    build-packages:
      - bc
      - bison
      - flex
      - libssl-dev
    override-build: |
      ./debian/scripts/misc/annotations --arch arm64 --flavour generic --export > .config

      # TODO: better way to do this?
      make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig
      scripts/config --disable SYSTEM_TRUSTED_KEYS
      scripts/config --disable SYSTEM_REVOCATION_KEYS
      scripts/config --disable ARM_FFA_TRANSPORT
      make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig

      make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)

      make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- Image
      cp -a arch/arm64/boot/Image "${CRAFT_PART_INSTALL}/"

      mkdir ./modules
      make INSTALL_MOD_STRIP=1 INSTALL_MOD_PATH="./modules" ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules_install

      cp -a ./modules/lib/modules "${CRAFT_PART_INSTALL}/"
    prime:
      - -Image
      - modules

  optee-client:
    plugin: nil
    stage-packages:
      - libteec1:arm64

  chroot:
    plugin: nil
    build-packages:
      - wget
      - zstd
    override-build: |
      # building the initrd for an arm64 system requires that we use a arm64
      # chroot with ubuntu-core-initramfs installed in it
      wget https://cdimage.ubuntu.com/ubuntu-base/noble/daily/current/noble-base-arm64.tar.gz

      mkdir fs
      tar -xvf ./noble-base-arm64.tar.gz -C ./fs

      finish() {
        umount -R ./fs/{proc,run,sys,dev} || true
      }
      trap finish EXIT

      cp --no-dereference /etc/resolv.conf ./fs/etc/resolv.conf
      for m in proc run sys dev dev/pts dev/null dev/zero dev/full dev/random dev/urandom dev/tty; do
        mount --bind "/${m}" "./fs/${m}"
      done

      chroot ./fs apt-get update
      chroot ./fs apt-get install -y software-properties-common linux-firmware
      chroot ./fs add-apt-repository ppa:snappy-dev/image -y
      chroot ./fs apt-get update
      chroot ./fs apt-get install -y ubuntu-core-initramfs

      finish

      tar --zstd -cvf ${CRAFT_PART_INSTALL}/chroot.tar.zst -C ./fs .
    prime:
      - -*

  initrd:
    after: [kernel, optee-client, chroot]
    plugin: nil
    build-packages:
      - cpio
      - kmod
      - qemu-user-static
      - u-boot-tools
      - zstd
    override-build: |
      mkdir fs
      tar -xvf ${CRAFT_STAGE}/chroot.tar.zst -C ./fs

      finish() {
        umount -R ./fs/{proc,run,sys,dev} || true
      }
      trap finish EXIT

      for m in proc run sys dev dev/pts dev/null dev/zero dev/full dev/random dev/urandom dev/tty; do
        mount --bind "/${m}" "./fs/${m}"
      done

      # copy the modules to the chroot so that emulated ubuntu-core-initramfs
      # can access them
      cp -a "${CRAFT_STAGE}/modules" ./fs/tmp/

      # this is how we configure ubuntu-core-initramfs to copy the tee and optee
      # kernel modules into the initrd
      mkdir -p ./fs/usr/lib/ubuntu-core-initramfs/modules/optee
      echo tee > ./fs/usr/lib/ubuntu-core-initramfs/modules/optee/extra-modules.conf
      echo optee >> ./fs/usr/lib/ubuntu-core-initramfs/modules/optee/extra-modules.conf

      cp ./fs/usr/lib/ubuntu-core-initramfs/main/usr/lib/snapd/info "${CRAFT_PART_INSTALL}/snapd-info"

      # since we're using the optee feature (that we've defined here), we can
      # tell ubuntu-core-initramfs to add files to the initrd by putting them
      # into a directory under /usr/lib/ubuntu-core-initramfs/optee
      mkdir -p ./fs/usr/lib/ubuntu-core-initramfs/optee
      for path in "${CRAFT_STAGE}/usr/lib/aarch64-linux-gnu/libteec.so"*; do
        install -D "${path}" "./fs/usr/lib/ubuntu-core-initramfs/optee/${path#${CRAFT_STAGE}}"
      done

      kernel_version=$(basename "${CRAFT_STAGE}/modules/"*)
      chroot ./fs ubuntu-core-initramfs create-initrd --feature main optee --kernelver="${kernel_version}" --kerneldir "/tmp/modules/${kernel_version}" --firmwaredir '/lib/firmware' --output initrd.img

      cp -a "./fs/initrd.img-${kernel_version}" "${CRAFT_PART_INSTALL}/initrd.img"

      # steal the firmware from the arm64 chroot, it should be usable with the
      # kernel we've just built
      cp -a ./fs/lib/firmware "${CRAFT_PART_INSTALL}/"
    prime:
      - initrd.img
      - firmware
      - snapd-info

  # TODO: change this once PR #1 is merged
  signing-keys:
    plugin: dump
    source: https://git.launchpad.net/~ondrak/+git/dev-keys
    source-type: git
    source-branch: master
    organize:
      '*': signing-keys/
    prime:
      - -*

  fit:
    after: [initrd, kernel, signing-keys]
    plugin: nil
    source: .
    build-packages:
      - u-boot-tools
      - device-tree-compiler
      - ipxe-qemu
      - qemu-system-arm
    override-build: |
      cp ./qemu.its "${CRAFT_STAGE}/qemu.its"
      mkimage --fit "${CRAFT_STAGE}/qemu.its" -k "${CRAFT_STAGE}/signing-keys" "${CRAFT_PART_INSTALL}/kernel.img"
    prime:
      - kernel.img
      - qemu.its
